---
- name: Samba config directory
  become: yes
  file:
    path: /etc/samba
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx

- name: Check for Samba credentials file
  become: yes
  stat:
    path: "{{samba_creds_file}}"
  register: samba_creds

- name: Perms on Samba credentials file
  become: yes
  file:
    path: "{{samba_creds_file}}"
    state: file
    owner: root
    group: root
    mode: u=rw,g=,o=
  when: samba_creds.stat.exists

#Block below only if samba_creds_file does not exist
- name: Gen random password & create Samba credentials file
  block:
    - name: Get User ID Num
      uri:
        url: https://{{freenas_hostname}}/api/v2.0/user?username={{inventory_hostname_short}}
        user: "{{freenas_username}}"
        password: "{{freenas_password}}"
        method: GET
        body_format: json
        body: >
          {
          }
        force_basic_auth: yes
        status_code: 200
      delegate_to: localhost
      register: result

    #- debug:
    #    msg: "{{result.json}}"

    - fail:
        name: Fail if Freenas account doesn't exsit
        msg: "No user named '{{inventory_hostname_short}}' was found"
      when: "result.json|length == 0"

    - fail:
        name: Fail if multiple Freenas accounts exsit
        msg: "More than one user named '{{inventory_hostname_short}}' was found"
      when: "result.json|length > 1"

    - set_fact:
        freenasid: "{{ (result.json)[0].id }}"
        uid: "{{ (result.json)[0].uid }}"
        gid: "{{ (result.json)[0].group.bsdgrp_gid }}"
        groupname: "{{ (result.json)[0].group.bsdgrp_group }}"
      when: "result.json|length == 1"

    # - debug:
    #     msg: "{{freenasid}}"

    - set_fact:
        user_password: "{{ pwd_gen }}"

    # - debug:
    #     msg: "{{user_password}}"

    - name: Set User Password
      uri:
        url: https://{{freenas_hostname}}/api/v2.0/user/id/{{freenasid}}
        user: "{{freenas_username}}"
        password: "{{freenas_password}}"
        method: PUT
        body: >
          {"microsoft_account": true,
          "password": "{{user_password}}"
          }
        force_basic_auth: yes
        status_code: 200
        body_format: json
      delegate_to: localhost

    - name: Create Samba credentials file
      become: yes
      copy:
        content: |
          username={{inventory_hostname_short}}
          password={{user_password}}
        dest: "{{samba_creds_file}}"
        owner: root
        group: root
        mode: u=rw,g=,o=

  when: not samba_creds.stat.exists

- name: Perma-mount central share
  become: yes
  mount:
    path: /mnt/nas
    backup: yes
    src: //{{freenas_hostname}}/{{inventory_hostname_short}}
    fstype: cifs
    opts: vers=3,credentials={{samba_creds_file}},uid=nas,gid=nas,file_mode=0664,dir_mode=0775,x-systemd.automount
    state: mounted
